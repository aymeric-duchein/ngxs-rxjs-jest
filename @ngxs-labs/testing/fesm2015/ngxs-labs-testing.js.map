{"version":3,"file":"ngxs-labs-testing.js","sources":["ng://@ngxs-labs/testing/lib/helpers/ngxs-test.component.ts","ng://@ngxs-labs/testing/lib/helpers/ngxs-test.module.ts","ng://@ngxs-labs/testing/lib/ngxs.setup.ts","ng://@ngxs-labs/testing/lib/symbol.ts"],"sourcesContent":["import { AfterViewInit, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    template: ''\r\n})\r\nexport class NgxsTestComponent implements OnInit, AfterViewInit {\r\n    public ngOnInit(): void {}\r\n    public ngAfterViewInit(): void {}\r\n}\r\n","import { ApplicationRef, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { NgxsTestComponent } from './ngxs-test.component';\r\n\r\n@NgModule({\r\n    imports: [BrowserModule],\r\n    declarations: [NgxsTestComponent],\r\n    entryComponents: [NgxsTestComponent]\r\n})\r\nexport class NgxsTestModule {\r\n    public static ngDoBootstrap(app: ApplicationRef): void {\r\n        app.bootstrap(NgxsTestComponent);\r\n    }\r\n}\r\n","import 'core-js/es6/reflect';\r\nimport 'core-js/es7/reflect';\r\nimport 'zone.js/dist/zone';\r\n\r\nimport { ApplicationRef, Type } from '@angular/core';\r\nimport { TestBed, TestBedStatic } from '@angular/core/testing';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ÉµBrowserDomAdapter as BrowserDomAdapter, ÉµDomAdapter as DomAdapter } from '@angular/platform-browser';\r\nimport { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';\r\nimport { NgxsModule, StateContext, Store } from '@ngxs/store';\r\n\r\nimport { NgxsTestModule } from './helpers/ngxs-test.module';\r\nimport {\r\n    DispatchFn,\r\n    NgxsOptionsTesting,\r\n    NgxsTesting,\r\n    ResetFn,\r\n    SelectFn,\r\n    SelectSnapshotFn,\r\n    SnapshotFn,\r\n    StateContextMap\r\n} from './symbol';\r\nimport { NGXS_STATE_CONTEXT_FACTORY } from '@ngxs/store/internals';\r\nimport { of } from 'rxjs';\r\nimport { MappedStore } from '@ngxs/store/src/internal/internals';\r\n\r\nexport class NgxsTestBed {\r\n    public static configureTestingStates(options: NgxsOptionsTesting): NgxsTesting {\r\n        function getStateCtxMocks(states: Type<unknown>[]): StateContextMap {\r\n            function createMockStateContext<T>(stateClass: Type<unknown>): StateContext<T> {\r\n                const { defaults, name } = stateClass['NGXS_OPTIONS_META'];\r\n                const store: Store = TestBed.get(Store);\r\n\r\n                return {\r\n                    getState: jest.fn().mockImplementation(() => defaults),\r\n                    setState: jest.fn().mockImplementation((val: T) => {\r\n                        store.reset({ [name]: val });\r\n                    }),\r\n                    patchState: jest.fn().mockImplementation((val: Partial<T>) => {\r\n                        store.reset({ [name]: { ...defaults, ...val } });\r\n                    }),\r\n                    dispatch: jest.fn().mockImplementation(() => of())\r\n                };\r\n            }\r\n\r\n            function mockCreateStateContext(mocksTest: {\r\n                [key: string]: StateContext<unknown>;\r\n            }): (arg: unknown) => any {\r\n                return ((state: MappedStore) => {\r\n                    return mocksTest[state.name];\r\n                }) as (arg: unknown) => any;\r\n            }\r\n\r\n            const stateContextFactory = TestBed.get(NGXS_STATE_CONTEXT_FACTORY);\r\n            const mocks: { [key: string]: StateContext<unknown> } = states.reduce(\r\n                (acc, state) => ({ ...acc, [state['NGXS_OPTIONS_META'].name]: createMockStateContext(state) }),\r\n                {}\r\n            );\r\n\r\n            jest.spyOn(stateContextFactory, 'createStateContext').mockImplementation(mockCreateStateContext(mocks));\r\n\r\n            return mocks;\r\n        }\r\n\r\n        this.resetTestBed();\r\n\r\n        if (options.before) {\r\n            options.before();\r\n        }\r\n\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                NgxsTestModule,\r\n                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),\r\n                ...(options.imports || [])\r\n            ],\r\n            providers: [\r\n                ...(options.providers || [])\r\n            ]\r\n        }).compileComponents();\r\n\r\n        NgxsTestBed.ngxsBootstrap();\r\n\r\n        return {\r\n            get store(): Store {\r\n                return TestBed.get(Store);\r\n            },\r\n            get snapshot(): SnapshotFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.snapshot.bind(store);\r\n            },\r\n            get dispatch(): DispatchFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.dispatch.bind(store);\r\n            },\r\n            get selectSnapshot(): SelectSnapshotFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.selectSnapshot.bind(store);\r\n            },\r\n            get select(): SelectFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.select.bind(store);\r\n            },\r\n            get selectOnce(): SelectFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.selectOnce.bind(store);\r\n            },\r\n            get reset(): ResetFn {\r\n                const store: Store = TestBed.get(Store);\r\n                return store.reset.bind(store);\r\n            },\r\n            get getTestBed(): TestBedStatic {\r\n                return TestBed;\r\n            },\r\n            get getStateContextMocks(): StateContextMap {\r\n                return getStateCtxMocks(options.states || []);\r\n            }\r\n        };\r\n    }\r\n\r\n    private static ngxsBootstrap(): void {\r\n        NgxsTestBed.createRootNode();\r\n        NgxsTestModule.ngDoBootstrap(TestBed.get(ApplicationRef));\r\n    }\r\n\r\n    private static resetTestBed(): void {\r\n        TestBed.resetTestEnvironment();\r\n        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());\r\n    }\r\n\r\n    private static createRootNode(selector = 'app-root'): void {\r\n        const document = TestBed.get(DOCUMENT);\r\n        const adapter: DomAdapter = new BrowserDomAdapter();\r\n\r\n        const root = adapter.firstChild(adapter.content(adapter.createTemplate(`<${selector}></${selector}>`)));\r\n\r\n        const oldRoots = adapter.querySelectorAll(document, selector);\r\n        oldRoots.forEach((oldRoot) => adapter.remove(oldRoot));\r\n\r\n        adapter.appendChild(document.body, root);\r\n    }\r\n}\r\n","import { StateContext, Store } from '@ngxs/store';\r\nimport { ModuleWithProviders, Provider, Type } from '@angular/core';\r\nimport { TestBedStatic } from '@angular/core/testing';\r\nimport { NgxsConfig } from '@ngxs/store/src/symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface NgxsOptionsTesting {\r\n    states?: Type<unknown>[];\r\n    ngxsOptions?: Partial<NgxsConfig>;\r\n    imports?: ModuleWithProviders[];\r\n    before?: () => void;\r\n    providers?: Provider[];\r\n}\r\n\r\nexport interface StateContextMap {\r\n    [key: string]: StateContext<unknown>;\r\n}\r\n\r\nexport type ResetFn<T = any> = (state: T) => T;\r\nexport type SnapshotFn<T = any> = () => T;\r\nexport type DispatchFn<T = any, U = any> = (event: U | U[]) => Observable<T>;\r\nexport type SelectFn<T = any, U = any> =\r\n    | ((selector: string) => Observable<T>)\r\n    | ((selector: Type<U>) => Observable<T>)\r\n    | ((selector: any) => Observable<T>);\r\n\r\nexport type SelectSnapshotFn<T = any, U = any> =\r\n    | ((selector: string) => T)\r\n    | ((selector: Type<U>) => T)\r\n    | ((selector: any) => T);\r\n\r\nexport interface NgxsTesting {\r\n    readonly store: Store;\r\n    readonly getTestBed: TestBedStatic;\r\n    readonly snapshot: SnapshotFn;\r\n    readonly dispatch: DispatchFn;\r\n    readonly selectSnapshot: SelectSnapshotFn;\r\n    readonly select: SelectFn;\r\n    readonly selectOnce: SelectFn;\r\n    readonly reset: ResetFn;\r\n    readonly getStateContextMocks: StateContextMap;\r\n}\r\n"],"names":["BrowserDomAdapter"],"mappings":"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"}